<?xml version="1.0" encoding="UTF-8"?>
<test-data>
    <test-code>
        <description><![CDATA[
Basic test case : accesing methods reflectively.
     ]]></description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[
			public class Violation {
				public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
					// Possible call to forbidden getDeclaredConstructors
					Class[] arrayOfClass = new Class[1];
					this.getClass().getDeclaredConstructors();
				}
			}
		     ]]>
		</code>
    </test-code>
	<test-code>
        <description>
        	<![CDATA[
				Basic test case : accesing methods reflectively.
     		]]>
     	</description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[
			public class Violation {
				public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
					// Possible call to forbidden getDeclaredConstructors
					Class[] arrayOfClass = new Class[1];
					this.getClass().getDeclaredConstructor(arrayOfClass);
				}
			}
		     ]]>
		</code>
    </test-code>
    <test-code>
        <description>
        	<![CDATA[
				Basic test case : accesing methods reflectively.
     		]]>
 		</description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[
			public class Violation {
				public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
					// Possible call to forbidden getDeclaredConstructors
					Class clazz = this.getClass();
					clazz.getDeclaredConstructor(arrayOfClass);
				}
			}
		     ]]>
		</code>
    </test-code>    <test-code>
        <description><![CDATA[
Basic test case : accesing methods reflectively.
     ]]></description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[

			public class Violation {
				public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
					Class clazz = this.getClass();
					clazz.getDeclaredConstructors();
				}
			}
		     ]]>
		</code>
    </test-code>
    <test-code>
        <description><![CDATA[
Basic test case : accesing methods reflectively.
     ]]></description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[

			public class Violation {
				public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
					Class clazz = this.getClass();
					// Possible call to forbidden setAccessible
					clazz.getMethod("", arrayOfClass).setAccessible(false);
				}
			}
		     ]]>
		</code>
    </test-code>
    <test-code>
        <description><![CDATA[
Basic test case : accesing methods reflectively.
     ]]></description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[
			public class Violation {
				public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
					Class clazz = this.getClass();
					AccessibleObject.setAccessible(null, false);
				}
			}
		     ]]>
		</code>
    </test-code>
    <test-code>
        <description><![CDATA[
Basic test case : accesing methods reflectively.
     ]]></description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[
			public class Violation {
				public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
					// Possible call to forbidden getDeclaredConstructors
					Method.setAccessible(null, false);
				}
			}
		     ]]>
		</code>
    </test-code>
    <test-code>
        <description><![CDATA[
Basic test case : accesing methods reflectively.
     ]]></description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[
			public class Violation {
				public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
					// Possible call to forbidden getDeclaredConstructors
					Method[] methodsArray = clazz.getMethods();
					int nbMethod;
					for ( nbMethod = 0; nbMethod < methodsArray.length; nbMethod++ ) {
						methodsArray[nbMethod].setAccessible(false);
					}
				}
			}
		     ]]>
		</code>
    </test-code>
    <test-code>
        <description>
        	<![CDATA[
				Basic test case : accesing methods reflectively.
    		]]>
    	</description>
        <expected-problems>1</expected-problems>
        <code>
        	<![CDATA[
			import java.security.PrivilegedAction;

			public class Violation {
				public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
					// Possible call to forbidden PrivilegedAction
					PrivilegedAction priv = (PrivilegedAction) new Object(); priv.run();
				}
			}
		     ]]>
		</code>
    </test-code>
</test-data>