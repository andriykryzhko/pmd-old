<?xml version="1.0"?>
<document>
  <properties>
    <author email="dpeugh@users.sourceforge.net">David Dixon-Peugh</author>
    <title>IDE Integrations</title>
  </properties>

  <body>
    <section name="Integrations with IDEs">
      <subsection name="Summary">
<table>
  <tr><td><b>IDE</b></td>
      <td><b>File Release</b></td>
      <td><b>Current Version</b></td>
      <td><b>Author</b></td>
      <td><b>Download</b></td></tr>
  <tr><td>Eclipse</td>
      <td>pmd-eclipse</td>
      <td>0.3</td>
      <td>DDP, Dave Craine</td>
      <td><a href="http://sourceforge.net/project/showfiles.php?group_id=56262">X</a></td></tr>
  <tr><td>Emacs</td>
      <td>pmd-emacs</td>
      <td>0.1</td>
      <td>DDP</td>
      <td><a href="http://sourceforge.net/project/showfiles.php?group_id=56262">X</a></td></tr>
  <tr><td>JBuilder</td>
      <td>pmd-jbuilder</td>
      <td>0.9</td>
      <td>Dave Craine</td>
      <td><a href="http://sourceforge.net/project/showfiles.php?group_id=56262">X</a></td></tr>
  <tr><td>Netbeans/Forte/Sun ONE</td>
      <td>pmd-netbeans</td>
      <td>0.5</td>
      <td>Ole Martin Mork</td>
      <td><a href="http://sourceforge.net/project/showfiles.php?group_id=56262">X</a></td></tr>
  <tr><td>JEdit</td>
      <td>pmd-jedit</td>
      <td>1.1</td>
      <td>Tom Copeland</td>
      <td><a href="http://sourceforge.net/project/showfiles.php?group_id=56262">X</a></td></tr>
  <tr><td>Maven</td>
      <td>pmd-maven</td>
      <td>0.4</td>
      <td>Siegfried Goeschl</td>
      <td><a href="http://sourceforge.net/projects/maven-plugins/">X</a></td></tr>
  <tr><td>IntelliJ IDEA</td>
      <td>N/A</td>
      <td>N/A</td>
      <td>Tom Copeland</td>
      <td>N/A</td></tr>
  <tr><td>Ant</td>
      <td>N/A</td>
      <td>N/A</td>
      <td>Tom Copeland</td>
      <td>N/A</td></tr>
  </table>
      </subsection>
      <subsection name="Eclipse">
<p>
Integration into Eclipse is accomplished through the extensive
Plugin architecture provided by Eclipse.  It is written in Java,
and has some nice features to it.
</p>
<p>
Eclipse Integration will fill the TODO list of the project with
each Rule Violation that PMD detects.  These violations are marked
in the code with the Task icon on the left hand side of the editor.
</p>
<p>
The Eclipse integration was written with the version 2.0 of Eclipse,
so I'm not certain if it will work on earlier versions.
</p>
<p>
As Eclipse is not my primary IDE, we are looking for people who can
make suggestions, and possibly even handle the care and feeding of
the Eclipse plugin.
</p>
      </subsection>
      <subsection name="Emacs">
<p>
Integration with GNU Emacs is performed through ELisp. (what else?)
</p>
<p>
There is only one command "pmd-current-buffer" which will execute
PMD on the Java code in the current buffer.  It will generate an
XML report in the *PMD* buffer.
</p>
<ul>
<li>Enable jumping to the rule violation in the source code</li>
<li>Generally, make it nicer to work with</li>
</ul>

      </subsection>
      <subsection name="Borland JBuilder">
<p>
To enable this OpenTool in JBuilder, place the PMDOpenTool.jar file AND the pmd-x.x.jar file (where
x.x is the version id) into JBuilder's lib/ext directory.  Once JBuilder is restart, the PMD OpenTool
will be enabled.
What you can do:
<ul>
<li>Check a single file by bringing up the context menu from the file tab and selecting PMDCheck</li>
<li>Configure the rulesets that the PMD OpenTool will use by selecting Tools->PMD->Configure PMD</li>
<li>Check all the files in a project by bringing up the context menu for the project node and selecting PMD Check Project</li>
</ul>
</p>
<p>When running PMD, the results will be displayed in the MessageView under a tab called PMD Results.  If you click on a
violation message within this view, you will be taken to the line in the source code where the violation was detected.
</p>
<p>Things still to do:
<ul>
<li>Enable selection of individual rules within a rule set (maybe)</li>
<li>Optional insertion of @todo comments at the point of a violation</li>
<li>Possibly provide configurable ability to limit the number of violations per rule per file</li>
</ul>
</p>
      </subsection>

      <subsection name="JEdit">
<p>The way I use the JEdit plugin is:</p>
<ul>
<li>Dock the ErrorList by going to Utilities->Global Options->Docking and putting ErrorList at the bottom of the screen</li>
<li>Open the File Browser if it isn't already open</li>
<li>Double-click on a source directory</li>
<li>Select Plugins->PMD->Check directory recursively</li>
</ul>
<p>Note that you can select individual rules by going to Utilities->Global Options->Plugin Options->PMD.  Also,
you can change the plugin to prompt you for a directory to check by going to that same menu and
selecting the "Ask for Directory" checkbox.</p>

      </subsection>
      <subsection name="IDEA">
<p>There's not a "real" - i.e., integrated into the same Java VM - plugin for IDEA, but using it as an IDEA External Tool
works OK.  Here's how to set it up:</p>
<ul>
<li>Open IDEA and go to Tools->IDE Options</li>
<li>Select External Tools from the left side menu</li>
<li>Click on the Add button</li>
<li>Fill in the blocks</li>
<ul>
<li>Name: PMD</li>
<li>Description: PMD doth help one clean the code</li>
<li>Program: javaw</li>
<li>For the next two parameters you'll need to plug in the location of your PMD installation, the rulesets you want to use, and your working directory</li>
<li>Parameters: -cp %CLASSPATH%;c:\pmd\lib\pmd-1.02.jar net.sourceforge.pmd.PMD $FilePath$ ideaj rulesets/unusedcode.xml,rulesets/imports.xml $Sourcepath$ $FileClass$.method $FileName$ </li>
<li>Working directory: c:\</li>
</ul>
</ul>
<p>That's pretty much it.  Now you can right click on a source directory and select PMD, it'll run recursively on the source files, and the results should
be displayed in a window and hyperlinked into the correct file and line of code.  I usually
right-click on the message window title bar and unselect "autohide" so the window doesn't go
away every time I fix something in the code window.</p>
      </subsection>
      <subsection name="Maven">
<p>
<ul>
<li>Copy the downloaded plugin into the Maven plugin directory.</li>
<li>Run "maven -g" and look out for documented PMD goals. If you see some then the unpacking succeeded.</li>
<li>The PMD plugin can be started through "maven pmd" or integrated by using the following code snippet in
maven.xml:</li>
    <source>
<![CDATA[
<?xml version="1.0"?>
 <preGoal name="site:generate">
    <attainGoal name="pmd"/>
 </preGoal>
]]>
    </source>
<li>The generated report has to be added manually to the website which is usually done with navigation.xml</li>
    <source>
<![CDATA[
<?xml version="1.0"?>
  <menu name="Custom Reports">
    <item name="PMD Report" href="/pmd-report.html"/>
    <!-- Add more custom reports here -->
  </menu>
]]>
    </source>
    <li>Please see <a href="http://sourceforge.net/projects/maven-plugins/">the Maven plugins web site</a> for more information.</li>
</ul>
</p>
      </subsection>
      <subsection name="Ant">
<p>
Using PMD with Ant is such a standard usage that we hardly think of it as an integration point.  But, I guess
it is.  You can read more about the PMD Ant task <a href="running.html">here</a>.
</p>
      </subsection>
      </section>
  </body>
</document>
