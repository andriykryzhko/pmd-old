<?xml version="1.0"?>
<document>
<properties>
    <author email="tomcopeland@users.sourceforge.net">Tom Copeland</author>
    <title>How to write a PMD rule</title>
</properties>
<body>
    <section name="How to write a PMD rule">
<p>
Writing PMD rules is cool because you don't have to wait for us to get around to implementing feature requests.
</p>
    <subsection name="Get a development environment set up first">
    <p>
    In order to do rules, it'll help if you can modify the PMD source.
    So download the latest PMD source release and unzip it somewhere on your computer.
    </p>
    </subsection>
    <subsection name="Figure out what you want to look for">
    <p>
    Lets's figure out what problem we want to spot.   We can use "While loops must use braces" as an example.
    In the source code below, it's easy to get lost visually - it's kind of hard to tell what the curly braces belong to.
    </p>
    <source>
<![CDATA[
       public class Example {
        public void bar() {
         while (baz)
            buz.doSomething();
        }
       }
]]>
    </source>
    <p>
    So we know what an example in source code looks like, which is half the battle.
    </p>
    </subsection>

    <subsection name="Write a test-data example and look at the AST">
    <p>
    PMD doesn't use the source code directly; it uses a <code>JavaCC</code> generated parser to parse the source code and
    produce an AST (Abstract Syntax Tree).  The AST for the code above looks like this:
    </p>
    <source>
<![CDATA[
CompilationUnit
 TypeDeclaration
  ClassDeclaration
   UnmodifiedClassDeclaration
    ClassBody
     ClassBodyDeclaration
      MethodDeclaration
       ResultType
       MethodDeclarator
        FormalParameters
       Block
        BlockStatement
         Statement
          WhileStatement
           Expression
            PrimaryExpression
             PrimaryPrefix
              Name
           Statement
            StatementExpression
             PrimaryExpression
              PrimaryPrefix
               Name
              PrimarySuffix
               Arguments
]]>
    </source>
    <p>
    You can generate this yourself by:
    <ul>
    <li>Run the batch file etc/astviewer.bat</li>
    <li>Paste the code into the left pane and click the button at the bottom of the screen</li>
    </ul>
    </p>
    <p>
    So you can see in the example above that the AST for a <code>WhileStatement</code> looks kind of like this (excluding that expression gibberish for clarity):
    </p>
    <source>
<![CDATA[
WhileStatement
 Expression
 Statement
  StatementExpression
]]>
    </source>
    <p>
    If you were to add curly braces and run the go.bat file again, you'd see that the AST would change a bit.  It'd look like this:
    </p>
    <source>
<![CDATA[
WhileStatement
 Expression
 Statement
  Block
   BlockStatement
    Statement
     StatementExpression
]]>
    </source>
    <p>
    Ah ha!  We see that the curly braces add a couple more AST elements - a <code>Block</code> and a <code>BlockStatement</code>.  So all we have
    to do is write a rule to detect a <code>WhileStatement</code> that has a <code>Statement</code> that's not followed by a <code>Block</code>, and we've got a rule violation.
    </p>
    </subsection>

    <subsection name="Write a rule class">
    <p>
    Create a new Java class that extends <code>net.sourceforge.pmd.AbstractRule</code>:
    </p>
    <source>
<![CDATA[
public class WhileLoopsMustUseBracesRule extends AbstractRule {
}
]]>
    </source>
    <p>
    That was easy.  PMD works by creating the AST and then traverses it recursively so a rule can get a callback
    for any type it's interested in.  So let's make sure our rule gets called whenever the AST traversal finds a <code>WhileStatement</code>:
    </p>
    <source>
<![CDATA[
public class WhileLoopsMustUseBracesRule extends AbstractRule {
    public Object visit(ASTWhileStatement node, Object data) {
        System.out.println("hello world");
    }
}
]]>
    </source>
    <p>
    We stuck a <code>println()</code> in there for now so we can see when our rule gets hit.
    </p>

    </subsection>

    <subsection name="Put the WhileLoopsMustUseBracesRule rule in a ruleset file">
    <p>
    Now our rule is written - at least, the shell of it is - and now we need to tell PMD about it.  We need
    to add it to a rule set XML file.  Look at <code>rulesets/basic.xml</code>; it's got lots of rule definitions in it.
    Copy and paste one of these rules, then fill in the elements and attributes:
    </p>
    <ul>
    <li>name - WhileLoopsMustUseBracesRule</li>
    <li>message - Use braces for while loops</li>
    <li>class - Wherever you put the rule.  Note this doesn't have to be in net.sourceforge.pmd; it can be in com.yourcompany.util.pmd or whereever you want</li>
    <li>description - Use braces for while loops</li>
    <li>example - A little code snippet in CDATA tags that shows a rule violation</li>
    </ul>
    </subsection>
    <p>
    We'll just leave this rule in the <code>rulesets/basic.xml</code> ruleset for now.  If you write rules for your own
    project that aren't applicable to other projects (rules to catch <code>Thread</code> creation, for example, or rules to catch
    <code>System.out.println()</code> usages) you might want to make a new ruleset <code>myproject.xml</code> and put your rules in there.
    </p>
    <subsection name="Run PMD using your new ruleset">
    <p>
    Remember when we ran <code>go.bat</code> over the <code>Example.java</code>?  Do it again.  This time your "hello world" will show up right after the
    AST gets printed out.  If it doesn't, post a message to
    <a href="http://sourceforge.net/forum/forum.php?forum_id=188192">the forum</a> so we can improve this document :-)
    </p>
    </subsection>

    <subsection name="Write code to add rule violations where appropriate">
    <p>
    Now that we've identified our problem, recognized the AST pattern that illustrates the problem, written a new rule, and plugged
    it into a ruleset, we need to actually make our rule find the problem, create a <code>RuleViolation</code>,
    and put it in the <code>Report</code>, which is attached to the <code>RuleContext</code>.  Like this:
    </p>
    <source>
<![CDATA[
public class WhileLoopsMustUseBracesRule extends AbstractRule {
    public Object visit(ASTWhileStatement node, Object data) {
        SimpleNode firstStmt = (SimpleNode)node.jjtGetChild(1);
        if (!hasBlockAsFirstChild(firstStmt)) {
            RuleContext ctx = (RuleContext)data;
            ctx.getReport().addRuleViolation(createRuleViolation(ctx, node.getBeginLine()));
        }
        return super.visit(node,data);
    }
    private boolean hasBlockAsFirstChild(SimpleNode node) {
        return (node.jjtGetNumChildren() != 0 && (node.jjtGetChild(0) instanceof ASTBlock));
    }
}
]]>
    </source>
    </subsection>
    <p>
    TODO - if you don't understand the code for the rule, post a message
    to <a href="http://sourceforge.net/forum/forum.php?forum_id=188192">the forum</a> so we can improve this document :-)
    </p>

    <subsection name="Repeat as necessary">
    <p>
    I've found that my rules usually don't work the first time, and so I have to go back and tweak them a
    couple times.  That's OK, if we were perfect programmers PMD would be useless anyhow :-).
    </p>
    <p>As an acceptance test of sorts, I usually run a rule on the JDK 1.4 source code and make sure that a random
    sampling of the problems found are in fact legitimate rule violations.
    This also ensures that the rule doesn't get confused by nested
    inner classes or any of the other oddities that appear at various points in the JDK source.
    </p>
    <p>
    You're rolling now.  If you think a rule would benefit the Java development community as a whole,
    post a message to <a href="http://sourceforge.net/forum/forum.php?forum_id=188192">the forum</a> so we can get the rule
    moved into one of the core rulesets.</p>
    <p>Or, if you can improve one of the existing rules, that'd be great too!  Thanks!
    </p>
    </subsection>
    </section>
</body>
</document>
