<?xml version="1.0"?>
<document>
<properties>
    <author email="tomcopeland@users.sourceforge.net">Tom Copeland</author>
    <title>How to write a PMD rule</title>
</properties>
<body>
    <section name="How to write a PMD rule">
<p>
Writing PMD rules is cool because you don't have to wait for us to get around to implementing feature requests.
</p>
    <subsection name="Get a development environment set up first">
    <p>
    In order to do rules, it'll help if you can modify the PMD source.
    So download the latest source release (i.e., pmd-src-0.7.zip or something) and unzip it somewhere on your computer.
    </p>
    </subsection>
    <subsection name="Figure out what you want to look for">
    <p>
    Now lets's figure out what problem you want to spot.  Let's use "While loops must use braces" as an example.
    You've seen this before a thousand times so you know what it looks like:
    </p>
    <source>
<![CDATA[
       public class Example {
        public void bar() {
         while (baz)
            buz.doSomething();
        }
       }
]]>
    </source>
    <p>
    So we know what an example in source code looks like, which is half the battle.
    </p>
    </subsection>

    <subsection name="Write a test-data example and look at the AST">
    <p>
    PMD doesn't use the source code directly; it uses a JJTree/JavaCC generated parser to parse the source code and
    produce an AST (Abstract Syntax Tree).  The AST for the code above looks like this:
    </p>
    <source>
<![CDATA[
CompilationUnit
 TypeDeclaration
  ClassDeclaration
   UnmodifiedClassDeclaration
    ClassBody
     ClassBodyDeclaration
      MethodDeclaration
       ResultType
       MethodDeclarator
        FormalParameters
       Block
        BlockStatement
         Statement
          WhileStatement
           Expression
            ConditionalExpression
             ConditionalOrExpression
              ConditionalAndExpression
               InclusiveOrExpression
                ExclusiveOrExpression
                 AndExpression
                  EqualityExpression
                   InstanceOfExpression
                    RelationalExpression
                     ShiftExpression
                      AdditiveExpression
                       MultiplicativeExpression
                        UnaryExpression
                         UnaryExpressionNotPlusMinus
                          PostfixExpression
                           PrimaryExpression
                            PrimaryPrefix
                             Name
           Statement
            StatementExpression
             PrimaryExpression
              PrimaryPrefix
               Name
              PrimarySuffix
               Arguments
]]>
    </source>
    <p>
    You can generate this yourself by:
    <ul>
    <li>Put the example file in the pmd/test-data directory in a file called "Example.java"</li>
    <li>Edit the class <code>net.sourceforge.pmd.PMD</code> and uncomment the line that says <code>c.dump();</code></li>
    <li>Open a command prompt and cd into the pmd/etc directory</li>
    <li>Recompile the project using the Ant task; i.e., <code>ant compile</code></li>
    <li>Run the <code>go</code> batch file to run PMD on one file, like this: <code>go Example xml rulesets/basic.xml</code>.  The go.bat file
    will fill in the directories and main class and whatnot.
    You'll probably have to edit this batch file to match where you unzipped PMD.</li>
    <li>If you get a ClassNotFoundException, make sure the pmd-?.?.jar file is on your classpath.</li>
    <li>The rulesets need to be on there too - so make sure the pmd directory is on your classpath too.</li>
    <li>If you get a FileNotFoundException, make sure that go.bat is pointing to the test-data directory where you put Example.java</li>
    </ul>
    </p>
    <p>
    So you can see in the example above that the AST for a WhileStatement looks kind of like this (excluding that expression gibberish for clarity):
    </p>
    <source>
<![CDATA[
WhileStatement
 Expression
 Statement
  StatementExpression
]]>
    </source>
    <p>
    If you were to add curly braces and run the go.bat file again, you'd see that the AST would change a bit.  It'd look like this:
    </p>
    <source>
<![CDATA[
WhileStatement
 Expression
 Statement
  Block
   BlockStatement
    Statement
     StatementExpression
]]>
    </source>
    <p>
    Ah ha!  We see that the curly braces add a couple more AST elements - a Block and a BlockStatement.  So all we have
    to do is write a rule to detect a WhileStatement that has a Statement that's not followed by a Block, and we've got a rule violation.
    </p>
    </subsection>

    <subsection name="Write a rule class">
    <p>
    Create a new Java class that extends <code>net.sourceforge.pmd.AbstractRule</code>:
    </p>
    <source>
<![CDATA[
public class WhileLoopsMustUseBracesRule extends BracesRule {
}
]]>
    </source>
    <p>
    That was easy.  PMD works by creating the AST and then traverses it recursively so a rule can get a callback
    for any type it's interested in.  So let's make sure our rule gets called whenever the AST traversal finds a WhileStatement:
    </p>
    <source>
<![CDATA[
public class WhileLoopsMustUseBracesRule extends BracesRule {
    public Object visit(ASTWhileStatement node, Object data) {
        System.out.println("hello world");
    }
}
]]>
    </source>
    <p>
    We stuck a <code>println()</code> in there for now so we can see when our rule gets hit.
    </p>

    </subsection>

    <subsection name="Put the WhileLoopsMustUseBracesRule rule in a ruleset file">
    </subsection>

    <subsection name="Run PMD using your new ruleset">
    </subsection>

    <subsection name="Write code to add rule violations where appropriate">
    </subsection>

    <subsection name="Repeat as necessary">
    </subsection>
    </section>
</body>
</document>
