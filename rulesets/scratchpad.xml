<?xml version="1.0"?>

<ruleset name="scratchpad" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../etc/ruleset_xml_schema.xml">
  <description>
These are new rules that are still in progress
  </description>

    <rule name="FooRule"
          message="foo?" symboltable="true"
          class="net.sourceforge.pmd.rules.FooRule">
      <description>
      Foo
      </description>
        <properties>
        <property name="xpath">
            <value>
                <![CDATA[
                ]]>
            </value>
        </property>
        </properties>
        <priority>3</priority>

      <example>
  <![CDATA[
  ]]>
      </example>
      </rule>

    <rule name="SuspiciousConstantFieldName"
          message="The field name indicates a constants but its modifiers don't"
          class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       A field name is all in uppercase characters, which in sun's java naming
       conventions indicate a constant. However, the field is not final.
       </description>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
//ClassOrInterfaceDeclaration[@Interface='false']
 /ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration
  [@Final='false']
  [VariableDeclarator/VariableDeclaratorId[upper-case(@Image)=@Image]]
 ]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
    <![CDATA[
public class Foo {
	// this is bad, since someone could accidentally
	// do PI = 2.71828; which is actualy e
	// final double PI = 3.16; is ok
	double PI = 3.16;

}
    ]]>
       </example>
     </rule>



    <!--


<rule
 ref="rulesets/codesize.xml/ExcessiveMethodLength"
 message="This is one of the 6 longest methods">
    <properties>
      <property name="topscore" value="6"/>
      <property name="minimum" value="1"/>
    </properties>
</rule>

<rule name="UnnecessaryParentheses"
      message="NOT FULLY IMPLEMENTED - Unnecessary parentheses are a bit noisy"
      class="net.sourceforge.pmd.rules.XPathRule">
  <description>
  Unnecessary parameters are a bit noisy
  </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
//ReturnStatement
 [count(//Expression) >1]
 [count(//PrimarySuffix)<2]
                ]]>
            </value>
        </property>
    </properties>
    <priority>3</priority>

  <example>
  <![CDATA[
public class Foo {
 public int bar() {
  return (42);
 }
}
  ]]>
  </example>
</rule>   !-->

    <!--
     <rule name="PositionalIterator"
           message="Avoid positional iterators"
           class="net.sourceforge.pmd.rules.design.PositionalIteratorRule">
       <description>
       Avoid positional iterators.   This doesn't work yet,
       it breaks on stuff like this:
       public class Foo {
        private int baz = true;
        public void bar(Iterator i) {
         Object x = null;
         while (i.hasNext()) {
          if (baz) {
           x = i.next();
          } else {
           x = new Runnable() {public void run() {Object bif = i.next();}}
          }
         }
        }
       }
       See javax.security.auth.Subject.java, inner class SecureSet, method removeAll(), around line 1092 for a good example.
       </description>

       <example>
   <![CDATA[
   public class PositionalIterators {
    public void foo(Iterator i) {
     while(i.hasNext()) {
      Object one = i.next();
      // 2 calls to next() inside the loop == bad!
      Object two = i.next();
     }
    }
   }
   ]]>
       </example>
       </rule>

    <rule name="StringConcatenation"
           message="Consider replacing String concatenation inside loops with a StringBuffer"
               class="net.sourceforge.pmd.rules.StringConcatenationRule">
       <description>
       Consider replacing String concatenation inside loops with a StringBuffer
       </description>

       <example>
   <![CDATA[
   public class Bar {
    public String foo(Object[] someArray) {
     String list = "" ;
     for( int i = 0; i < someArray.length; i++ ){
      list = list + "," + someArray[i];
     }
     return list;
    }
   }
   ]]>
       </example>
       </rule>
       -->

</ruleset>