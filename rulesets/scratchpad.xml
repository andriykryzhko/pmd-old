<?xml version="1.0"?>

<ruleset name="scratchpad" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../etc/ruleset_xml_schema.xml">
  <description>
These are new rules that are still in progress
  </description>

    <rule name="UnusedLocalVariable"
            message="Avoid unused local variables such as ''{0}''"
            class="net.sourceforge.pmd.rules.UnusedLocalVariableRule"
            externalInfoUrl="http://pmd.sourceforge.net/rules/unusedcode.html#UnusedLocalVariable">
        <description>
    Detects when a local variable is declared and/or assigned, but not used.
        </description>
        <priority>3</priority>

        <example>
    <![CDATA[
    public class Foo {
     public void doSomething() {
      int i = 5; // Unused
     }
    }
    ]]>
        </example>
      </rule>

    <!--
<rule name="MisplacedNullCheck"
  message="The null check here is misplaced. if the
variable is null we will get a NullPointerException"
  class="net.sourceforge.pmd.rules.XPathRule">
  <description>
The null check here is misplaced. if the variable is null
we will get a NullPointerException.
Either the check is useless (the variable will never
be "null" or incorrect).
  </description>
  <properties>
    <property name="xpath">
    <value>
<![CDATA[
//Expression/ConditionalAndExpression/descendant::PrimaryExpression/PrimaryPrefix/Name[
starts-with(@Image, concat(ancestor::PrimaryExpression/following-sibling::EqualityExpression[@Image="!=" and
./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]
/PrimaryExpression/PrimaryPrefix/Name[count(../../PrimarySuffix)=0]/@Image,"."))
]
]]>
   </value>
    </property>
  </properties>
  <priority>3</priority>
  <example>
<![CDATA[
public class Test {

 public String method1() { return "ok";}

 public String method2() {

        Test a=new Test();

        Test b=new Test();

        Test[] c= new Test[10];

        if (a!=null && a.equals(method1())) { //
won't
trigger the rule
          //whatever
        }


        if (a.equals(method1()) && a!=null) { // will
trigger the rule
          //whatever
        }

        if (b!=null && b.equals("1")
&& a!= null) { // will
trigger the rule
          //whatever
        }


        if ( "1".equals(b) && a!=null
&& a.equals(b.method1
())) {  // won't trigger the rule
          //whatever
        }

        if (b.equals(a.method1()) && a!=null) { // will

trigger the rule
          //whatever
        }

        if (a != null && a.equals("submit")
&& b != this)
{ // won't trigger the rule
          //whatever
        }

        if (c.length==1 && c[0].method2()!=null) { //
won't
trigger the rule
          //whatever
        }

        return "ok";
	}
}
]]>
  </example>
</rule>

-->



    <!--
    <rule name="UselessAssignment"
           message="This assignment to ''{0}'' is useless"
           class="net.sourceforge.pmd.rules.UselessAssignment"
           dfa="true">
       <description>
This assignment is useless
       </description>
         <priority>3</priority>
       <example>
   <![CDATA[
public class Foo {
 public void foo() {
  int x = 2; // useless assignment!
  x = 5;
  bar(x);
 }
}
   ]]>
       </example>
     </rule>
-->

    <!--

     <rule name="PositionalIterator"
           message="Avoid positional iterators"
           class="net.sourceforge.pmd.rules.design.PositionalIteratorRule">
       <description>
       Avoid positional iterators.   This doesn't work yet,
       it breaks on stuff like this:
       public class Foo {
        private int baz = true;
        public void bar(Iterator i) {
         Object x = null;
         while (i.hasNext()) {
          if (baz) {
           x = i.next();
          } else {
           x = new Runnable() {public void run() {Object bif = i.next();}}
          }
         }
        }
       }
       See javax.security.auth.Subject.java, inner class SecureSet, method removeAll(), around line 1092 for a good example.
       </description>
       <example>
   <![CDATA[
   public class PositionalIterators {
    public void foo(Iterator i) {
     while(i.hasNext()) {
      Object one = i.next();
      // 2 calls to next() inside the loop == bad!
      Object two = i.next();
     }
    }
   }
   ]]>
       </example>
       </rule>

    <rule name="StringConcatenation"
           message="Consider replacing String concatenation inside loops with a StringBuffer"
               class="net.sourceforge.pmd.rules.StringConcatenationRule">
       <description>
       Consider replacing String concatenation inside loops with a StringBuffer
       </description>

       <example>
   <![CDATA[
   public class Bar {
    public String foo(Object[] someArray) {
     String list = "" ;
     for( int i = 0; i < someArray.length; i++ ){
      list = list + "," + someArray[i];
     }
     return list;
    }
   }
   ]]>
       </example>
       </rule>
       -->

</ruleset>
