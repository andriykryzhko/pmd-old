<?xml version="1.0"?>

<ruleset name="scratchpad"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>
These are new rules that are still in progress.
  </description>


<rule   name="AvoidUsingOctalValues"
        message="Do not start a literal by 0 unless it's an octal value"
        class="net.sourceforge.pmd.rules.DynamicXPathRule"
        type="Literal"
        externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#AvoidUsingOctalValues">
<description>
Integers literals should not start with zero.
Zero means that the rest of literal have to be
interprated as an octal.
</description>
<properties>
<property name="xpath">
<value>
<![CDATA[

.
 [(starts-with(@Image, 0))]
 [not(substring(@Image, 2, 1) = 'x')]
 [not(substring(@Image, 2, 1) = 'L')]
 [string-length(@Image)>1]

]]>
</value>
</property>
</properties>
<priority>3</priority>
<example>
<![CDATA[
...
int i = 012; // set i with 10 not 12
int j = 010; // set j with 8 not 10
...
k = i * j; // set k with 80 not 120
..
}
]]>
</example>
</rule>

    <!--
    <rule name="UselessAssignment"
           message="This assignment to ''{0}'' is useless"
           class="net.sourceforge.pmd.rules.UselessAssignment"
           dfa="true">
       <description>
This assignment is useless.
       </description>
         <priority>3</priority>
       <example>
   <![CDATA[
public class Foo {
 public void foo() {
  int x = 2; // useless assignment!
  x = 5;
  bar(x);
 }
}
   ]]>
       </example>
     </rule>
-->

    <!--

     <rule name="PositionalIterator"
           message="Avoid positional iterators"
           class="net.sourceforge.pmd.rules.design.PositionalIteratorRule">
       <description>
       Avoid positional iterators.   This doesn't work yet,
       it breaks on stuff like this:
       public class Foo {
        private int baz = true;
        public void bar(Iterator i) {
         Object x = null;
         while (i.hasNext()) {
          if (baz) {
           x = i.next();
          } else {
           x = new Runnable() {public void run() {Object bif = i.next();}}
          }
         }
        }
       }
       See javax.security.auth.Subject.java, inner class SecureSet, method removeAll(), around line 1092 for a good example.
       </description>
       <example>
   <![CDATA[
   public class PositionalIterators {
    public void foo(Iterator i) {
     while(i.hasNext()) {
      Object one = i.next();
      // 2 calls to next() inside the loop == bad!
      Object two = i.next();
     }
    }
   }
   ]]>
       </example>
       </rule>

       -->

</ruleset>
