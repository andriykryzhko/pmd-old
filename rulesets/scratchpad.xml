<?xml version="1.0"?>

<ruleset name="scratchpad" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../etc/ruleset_xml_schema.xml">
  <description>
These are new rules that are still in progress
  </description>


    <rule  name="AvoidDecimalLiteralsInBigDecimalConstructor"
           message="Avoid creating BigDecimal with a decimal (float/double) literal. Use a String literal"
           class="net.sourceforge.pmd.rules.XPathRule"
           externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#AvoidDecimalLiteralsInBigDecimalConstructor">
      <description>
         One might assume that "new BigDecimal(.1)" is exactly equal
         to .1, but it is actually equal
         to .1000000000000000055511151231257827021181583404541015625.
         This is so because .1 cannot be represented exactly as a double
         (or, for that matter, as a binary fraction of any finite length).
         Thus, the long value that is being passed in to the constructor
         is not exactly equal to .1, appearances notwithstanding.

         The (String) constructor, on the other hand, is perfectly predictable:
         'new BigDecimal(".1")' is exactly equal to .1, as one
         would expect.  Therefore, it is generally recommended that the (String)
         constructor be used in preference to this one.
      </description>
      <properties>
        <property name="xpath">
        <value>
    <![CDATA[
    //VariableInitializer/Expression
    /PrimaryExpression/PrimaryPrefix
    /AllocationExpression[ClassOrInterfaceType[@Image="BigDecimal"]
    and
    ./Arguments/ArgumentList
    /Expression/PrimaryExpression/PrimaryPrefix/Literal[(not (ends-with
    (@Image,'"'))) and contains(@Image,".")]]
    ]]>
        </value>
        </property>
      </properties>
      <priority>3</priority>
      <example>
    <![CDATA[
    import java.math.BigDecimal;
    public class Test {

        public static void main(String[] args) {
          // this would trigger the rule
         BigDecimal bd=new BigDecimal(1.123);
          // this wouldn't trigger the rule
         BigDecimal bd=new BigDecimal("1.123");
          // this wouldn't trigger the rule
         BigDecimal bd=new BigDecimal(12);
        }
    }
    ]]>
      </example>
    </rule>

    
<!--
    <rule name="UselessAssignment"
           message="This assignment to ''{0}'' is useless"
           class="net.sourceforge.pmd.rules.UselessAssignment"
           dfa="true">
       <description>
This assignment is useless
       </description>
         <priority>3</priority>
       <example>
   <![CDATA[
public class Foo {
 public void foo() {
  int x = 2; // useless assignment!
  x = 5;
  bar(x);
 }
}
   ]]>
       </example>
     </rule>
-->

    <!--

     <rule name="PositionalIterator"
           message="Avoid positional iterators"
           class="net.sourceforge.pmd.rules.design.PositionalIteratorRule">
       <description>
       Avoid positional iterators.   This doesn't work yet,
       it breaks on stuff like this:
       public class Foo {
        private int baz = true;
        public void bar(Iterator i) {
         Object x = null;
         while (i.hasNext()) {
          if (baz) {
           x = i.next();
          } else {
           x = new Runnable() {public void run() {Object bif = i.next();}}
          }
         }
        }
       }
       See javax.security.auth.Subject.java, inner class SecureSet, method removeAll(), around line 1092 for a good example.
       </description>
       <example>
   <![CDATA[
   public class PositionalIterators {
    public void foo(Iterator i) {
     while(i.hasNext()) {
      Object one = i.next();
      // 2 calls to next() inside the loop == bad!
      Object two = i.next();
     }
    }
   }
   ]]>
       </example>
       </rule>

    <rule name="StringConcatenation"
           message="Consider replacing String concatenation inside loops with a StringBuffer"
               class="net.sourceforge.pmd.rules.StringConcatenationRule">
       <description>
       Consider replacing String concatenation inside loops with a StringBuffer
       </description>

       <example>
   <![CDATA[
   public class Bar {
    public String foo(Object[] someArray) {
     String list = "" ;
     for( int i = 0; i < someArray.length; i++ ){
      list = list + "," + someArray[i];
     }
     return list;
    }
   }
   ]]>
       </example>
       </rule>
       -->

</ruleset>
