<?xml version="1.0"?>

<ruleset name="Design Rules">
  <description>
The Design Ruleset contains a collection of rules that find questionable designs.
  </description>


  <rule name="UseSingletonRule"
        message="All methods are static.  Consider using Singleton instead."
        class="net.sourceforge.pmd.rules.design.UseSingletonRule">
    <description>
    If you have a class that has nothing but static methods, consider making it a Singleton
    </description>

    <example>
<![CDATA[
public class MaybeASingleton {
    public static void foo() {
     // etc
    }
    public static void bar() {
     // etc
    }
}
]]>
    </example>
  </rule>


  <rule name="LooseCouplingRule"
        message="Avoid using implementation types like ''{0}''; use the interface instead"
        class="net.sourceforge.pmd.rules.design.LooseCouplingRule">
    <description>
    Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead
    </description>

    <example>
<![CDATA[
import java.util.*;
public class Bar {

 // should be "private List list"
 private ArrayList list = new ArrayList();

 // should be "public Set getFoo()"
 public HashSet getFoo() {
  return new HashSet();
 }
}

]]>
    </example>
  </rule>


 <rule name="ExcessiveMethodLength"
       message="Avoid really long methods."
       class="net.sourceforge.pmd.rules.design.LongMethodRule">
   <description>
Excessive Method Length usually means that the method is doing
too much.  There is usually quite a bit of Cut and Paste there
as well.  Try to reduce the method size by creating helper methods,
and removing cut and paste.
   </description>
   <properties>
    <property name="minimumLength" value="200"/>
   </properties>
   <example>
<![CDATA[
public void doSomething() {
  System.out.println("I am a fish.");
  System.out.println("I am a fish.");
  System.out.println("I am a fish.");
  System.out.println("I am a fish.");
  System.out.println("I am a fish.");
  // 495 copies omitted for brevity.
}
]]>
   </example>

 </rule>

 <rule name="ExcessiveClassLength"
       message="Avoid really long Classes."
       class="net.sourceforge.pmd.rules.design.LongClassRule">
   <description>
Long Class files are indications that the class may be trying to
do too much.  Try to break it down, and reduce the size to something
managable.
   </description>
   <properties>
    <property name="minimumLength" value="1000"/>
   </properties>
   <example>
<![CDATA[
public class Foo {
  public void bar() {
    // 500 lines of code
  }

  public void baz() {
    // 500 more lines of code
  }
}
]]>
   </example>
 </rule>



</ruleset>



