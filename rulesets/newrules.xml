<?xml version="1.0"?>

<ruleset name="newrules" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../etc/ruleset_xml_schema.xml">
  <description>
These are new rules for the next release
  </description>


    <rule name="MissingSerialVersionUID"
          message="Classes implementing Serializable should set a serialVersionUID"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
          Classes that are serializable should provide a serialVersionUID field.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
//TypeDeclaration[
//UnmodifiedClassDeclaration/NameList[Name/@Image="Serializable" or Name/@Image="java.io.Serializable"]
and not(
//ClassBodyDeclaration/FieldDeclaration[VariableDeclarator/VariableDeclaratorId/@Image='serialVersionUID'] )
]
]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
<![CDATA[
public class Foo implements java.io.Serializable {
    String name;
    // Define serialization id to avoid serialization related bugs
    public static final long serialVersionUID = 4328743;
}

]]>
          </example>
    </rule>

    <rule name="UnnecessaryFinalModifier"
          message="Unnecessary final modifier in final class"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  When a class has the final modifier, all the methods are marked finally.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
    //ClassDeclaration[@Final='true']
    //MethodDeclaration[@Final='true']
    ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
<![CDATA[
public final class Foo {

    // This final modifier is not necessary, since the class is final
    // and thus, all methods are final
	private final void foo() {
	}
	
}

]]>
      </example>
    </rule>


    <rule name="AbstractClassDoesNotContainAbstractMethod"
          message="Class is defined abstract but it hasn't any abstract methods"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Abstract classes should have abstract methods, that are to be completed by subclasses.
  If the class is intended to not be instantiated, it should be done by providing private/protected constructors.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
    //ClassDeclaration[
        @Abstract='true'
        and count(//MethodDeclaration[@Abstract='true'])=0
        ]
    ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
<![CDATA[
public abstract class Foo {

    // This constructor prevents the class from being instantiated and makes 
    // unnecessary the usage of the abstract modifier for the class
    protected Foo() {}
    
	void foo() {
	}
	
}

]]>
      </example>
    </rule>


    <rule name="MissingStaticMethodInNonInstantiatableClass"
          message="Class cannot be instantiated and does not provide any static method"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  A class that has private constructors and does not have any static method cannot be used.
      </description>
      <properties>
          <property name="xpath">
              <value>
    <![CDATA[
    //ClassDeclaration[
        ( count(.//ConstructorDeclaration)>0 and count(.//ConstructorDeclaration) = count(.//ConstructorDeclaration[@Private='true']) )
        and 
        count(.//MethodDeclaration[@Static='true'])=0
        ]
    ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
<![CDATA[
/* This class is unusable, since it cannot be 
 instantiated (private constructor),
 and no static method can be called. 
 */
public class Foo {

    private Foo() {}
    
	void foo() {
	}
	
}

]]>
      </example>
    </rule>

    </ruleset>




