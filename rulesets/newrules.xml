<?xml version="1.0"?>

<ruleset name="newrules">
  <description>
These are new rules for the next release
  </description>


<rule   name="EqualsNull"
        message="Don't use equals() to compare against null"
        class="net.sourceforge.pmd.rules.XPathRule">
    <description>
     Newbie programmers sometimes get the comparison concepts confused
     and use equals() to compare to null.
    </description>
    <properties>
        <property name="xpath">
            <value>
<![CDATA[
//PrimaryExpression
 [PrimaryPrefix/Name[ends-with(@Image, 'equals')]]
 [PrimarySuffix/Arguments/ArgumentList
  /Expression/PrimaryExpression/PrimaryPrefix
   /Literal/NullLiteral]
]]>
            </value>
        </property>
     </properties>
    <priority>1</priority>
<example>
   <![CDATA[
class Bar {
   void foo() {
       String x = "foo";
       if (x.equals(null)) { // bad!
        doSomething();
       }
   }
}
]]>
    </example>
    </rule>

  <rule name="ConfusingTernary"
    message="Avoid if (x != y) ..; else ..;"
    class="net.sourceforge.pmd.rules.design.ConfusingTernary">
    <description>
      In an "if" expression with an "else" clause, avoid negation in
      the test.  For example, rephrase:
        if (x != y) diff(); else same();
      as:
        if (x == y) same(); else diff();
      Most "if (x != y)" cases without an "else" are often return
      cases, so consistent use of this rule makes the code easier
      to read.  Also, this resolves trivial ordering problems, such
      as "does the error case go first?" or "does the common case
      go first?".
    </description>
    <priority>3</priority>
    <example>
      <![CDATA[
      return (x != y) ? diff : same;
      ]]>
    </example>
  </rule>

</ruleset>


