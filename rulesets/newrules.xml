<?xml version="1.0"?>

<ruleset name="newrules" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../etc/ruleset_xml_schema.xml">
  <description>
These are new rules for the next release
  </description>

    <rule name="SimplifyStartsWith"
          message="This call to String.startsWith can be rewritten using String.charAt(0)"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Since it passes in a literal of length 1, this call to String.startsWith can be rewritten using String.charAt(0) to save some time.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
//PrimaryExpression
 [PrimaryPrefix/Name
  [ends-with(@Image, '.startsWith')]]
 [PrimarySuffix/Arguments/ArgumentList
  /Expression/PrimaryExpression/PrimaryPrefix
  /Literal
   [string-length(@Image)=3]
   [starts-with(@Image, '"')]
   [ends-with(@Image, '"')]
 ]
 ]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      boolean checkIt(String x) {
          return x.startsWith("a");
      }
  }]]>
      </example>
    </rule>

    <rule name="UnnecessaryParentheses"
          message="This return statement may have some unnecessary parentheses"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Sometimes return statement expressions are wrapped in unnecessary parentheses,
 making them look like a function call.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
//ReturnStatement
          /Expression
           /PrimaryExpression
            /PrimaryPrefix
             /Expression[count(*)=1]
              /PrimaryExpression
              /PrimaryPrefix]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      boolean bar() {
          return (true);
      }
  }]]>
      </example>
    </rule>

    <rule name="CollapsibleIfStatements"
          message="These nested if statements could be combined"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Sometimes two 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
//IfStatement[@Else='false']/Statement
 /IfStatement[@Else='false']
 |
//IfStatement[@Else='false']/Statement
 /Block[count(BlockStatement)=1]/BlockStatement
  /Statement/IfStatement[@Else='false']]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[public class Foo {
      void bar() {
          if (x) {
           if (y) {
             // do stuff
           }
          }
      }
  }]]>
      </example>
    </rule>

    <rule name="UseAssertEqualsInsteadOfAssertTrue"
          message="user assertEquals(x, y) instead of assertTrue(x.equals(y))"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
          This rule detects JUnit assertions in object equality. These assertions
          should be made by more specific methods, like assertEquals.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[

//PrimaryExpression
[ 
    PrimaryPrefix/Name
    [
        @Image = 'assertTrue' 
    ] 
]
[ 
    PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name
    [
        ends-with(@Image, '.equals')
    ]
]
                
 ]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
<![CDATA[
public class FooTest extends TestCase {

    void testCode() {
        Object a, b;

        // bad usage
        assertTrue(a.equals(b));

        // good usage
        assertEquals(a, b);        
    }
}
]]>
      </example>
    </rule>


    <rule name="UseAssertSameInsteadOfAssertTrue"
          message="user assertSame(x, y) instead of assertTrue(x==y)"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
          This rule detects JUnit assertions in object references equality. These assertions
          should be made by more specific methods, like assertSame, assertNotSame.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[

//PrimaryExpression
[ 
    PrimaryPrefix/Name
    [
        @Image = 'assertTrue' 
        or @Image = 'assertFalse' 
    ] 
]
[ 
    PrimarySuffix/Arguments/ArgumentList/Expression/EqualityExpression
    [
        @Image = '=='
        or  @Image = '!='
    ]
]
                
 ]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
<![CDATA[
public class FooTest extends TestCase {

    void testCode() {
        Object a, b;

        // bad usage
        assertTrue(a==b);

        // good usage
        assertSame(a, b);        
    }
}
]]>
      </example>
    </rule>

    <rule name="UseStringBufferForStringAppends"
              message="Prefer StringBuffer over += for concatenating strings"
              class="net.sourceforge.pmd.rules.XPathRule">
           <description>
      Finds usages of += for appending strings.
           </description>
          <properties>
              <property name="xpath">
                  <value>
                      <![CDATA[
//StatementExpression
    [PrimaryExpression/PrimaryPrefix/Name
        [@Image = ancestor::MethodDeclaration//LocalVariableDeclaration
            [./Type//ClassOrInterfaceType[@Image =
'String']]/VariableDeclarator/VariableDeclaratorId/@Image]]
    //AssignmentOperator[@Compound='true']
                      ]]>
                  </value>
              </property>
          </properties>
            <priority>3</priority>

           <example>
      <![CDATA[
         String a;

         a = "foo";
         a += " bar";

         // better would be:
         StringBuffer a = new StringBuffer("foo");
         a.append(" bar);
      ]]>
           </example>
        </rule>

    <rule name="SimplifyConditional"
              message="No need to check for null before an instanceof"
              class="net.sourceforge.pmd.rules.XPathRule">
           <description>
      No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.
           </description>
          <properties>
              <property name="xpath">
                  <value>
                      <![CDATA[
//Expression
 /ConditionalAndExpression
  [EqualityExpression[@Image='!=']
  //NullLiteral
and
InstanceOfExpression
 [PrimaryExpression
  //Name/@Image = ancestor::ConditionalAndExpression
   /EqualityExpression//PrimaryPrefix/Name/@Image]]]]>
                  </value>
              </property>
          </properties>
            <priority>3</priority>

           <example>
      <![CDATA[
class Foo {
 void bar(Object x) {
  if (x != null && x instanceof Bar) {
   // just drop the "x != null" check
  }
 }
}      ]]>
           </example>
        </rule>
</ruleset>

