<?xml version="1.0"?>

<ruleset name="newrules">
  <description>
These are new rules for the next release
  </description>

    <rule name="DontImportSunRule"
       message="Avoid importing anything from the 'sun.*' packages"
       class="net.sourceforge.pmd.rules.XPathRule">
       <description>
          Avoid importing anything from the 'sun.*' packages.  These packages are not portable and are likely to change.
       </description>
       <properties>
          <property name="xpath">
               <value>
<![CDATA[
   //ImportDeclaration
   [starts-with(Name/@Image, 'sun.')]
   [not(starts-with(Name/@Image, 'sun.misc.Signal'))]
]]>

               </value>
          </property>
       </properties>
       <priority>4</priority>

       <example>
<![CDATA[
   import sun.misc.foo;
   public class Foo {}
]]>
       </example>
    </rule>

    <rule name="EmptyFinalizer"
          message="Avoid empty finalize methods"
          class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       If the finalize() method is empty, then it does not need to exist.
       </description>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
   //MethodDeclaration[MethodDeclarator[@Image='finalize'][not(FormalParameters/*)]]
      /Block[count(*)=0]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
<![CDATA[
   public class Foo {
       public void finalize() {}
   }
]]>
       </example>
     </rule>

    <rule name="EmptyStaticInitializer"
           message="Empty static initializer was found"
           class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       An empty static initializer was found.
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[
//ClassBodyDeclaration/Initializer[@Static='true']/Block[count(*)=0]
]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[
 public class Foo {
  // why are there no statements in this static block?
  static {}
 }
   ]]>
       </example>
     </rule>

    <rule name="AvoidDollarSigns"
           message="Avoid using dollar signs in variable/method/class/interface names"
           class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       Avoid using dollar signs in variable/method/class/interface names.
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[
//UnmodifiedClassDeclaration[contains(@Image, '$')]
|
//VariableDeclaratorId[contains(@Image, '$')]
|
//UnmodifiedInterfaceDeclaration[contains(@Image, '$')]
|
//MethodDeclarator[contains(@Image, '$')]
 ]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[
 public class Fo$o {  // yikes!
 }
   ]]>
       </example>
     </rule>


    <rule name="UnconditionalIfStatement"
       message="Do not use 'if' statements that are always true or always false"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Do not use "if" statements that are always true or always false.
      </description>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//IfStatement/Expression/ConditionalAndExpression
 /InstanceOfExpression/UnaryExpression
 /PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral
                    ]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
      <example>
  <![CDATA[
public class Foo {
 public void close() {
  if (true) {
       // ...
   }
 }
}
  ]]>
      </example>
    </rule>

    <rule name="FinalizeOnlyCallsSuperFinalize"
          message="Finalize should do something besides just calling super.finalize()"
          class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       If the finalize() is implemented, it should do something besides just calling
       super.finalize().
       </description>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
   //MethodDeclaration[MethodDeclarator[@Image="finalize"][not(FormalParameters/*)]]
       /Block[count(BlockStatement)=1]
         /BlockStatement[Statement/StatementExpression/PrimaryExpression
          /PrimaryPrefix[@Image="finalize"]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
           <![CDATA[
               public class Foo {
                   public void finalize() {
                     super.finalize();
                   }
               }
           ]]>
       </example>
     </rule>

<rule name="FinalizeOverloaded"
      message="Finalize methods should not be overloaded"
      class="net.sourceforge.pmd.rules.XPathRule">
   <description>
   Methods named finalize() should not have parameters.  It is
   confusing and probably a bug to overload finalize().  It will
   not be called by the VM.
   </description>
    <properties>
        <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration
 [MethodDeclarator[@Image='finalize'][FormalParameters/*]]
]]>
            </value>
        </property>
    </properties>
    <priority>3</priority>
   <example>
<![CDATA[
   public class Foo {
       // this is confusing and probably a bug
       public void finalize(int a) {
       }
   }
]]>
   </example>
 </rule>

    <rule name="FinalizeDoesNotCallSuperFinalize"
          message="Last statement in finalize method should be a call to super.finalize()"
          class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       If the finalize() is implemented, its last action should be to call super.finalize
       </description>
        <properties>
            <property name="xpath">
                <value>
<!-- in english: a method declaration of finalize(), with no arguments, containing
a block whose last statement is NOT a call to super.finalize -->
<![CDATA[
//MethodDeclaration[MethodDeclarator[@Image='finalize'][not(FormalParameters/*)]]
   /Block
      /BlockStatement[last()]
      [not(Statement/StatementExpression/PrimaryExpression/PrimaryPrefix[@Image='finalize'])]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
<![CDATA[
public class Foo {
   public void finalize() {
       something();
       // neglected to call super.finalize()
   }
}
]]>
       </example>
     </rule>


    <rule name="MethodWithSameNameAsEnclosingClass"
          message="Classes should not have non-constructor methods with the same name as the class"
          class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       Non-constructor methods should not have the same name as the enclosing class.
       </description>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
   //UnmodifiedClassDeclaration[@Image = //MethodDeclarator/@Image]
]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
       <example>
    <![CDATA[
public class MyClass {
// this is bad because it is a method
public void MyClass() {}
// this is OK because it is a constructor
public MyClass() {}
}
    ]]>
       </example>
     </rule>

    <rule name="ExplicitCallToFinalize"
           message="Explicit call of finalize method"
           class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       An explicit call was made to a finalize method.  Finalize methods
       are meant to be executed at most once (by the garbage collector).
       Calling it explicitly could result in the method being executed
       twice for that object (once by you, once by the garbage collector).
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[
//PrimaryExpression[PrimarySuffix
 /Arguments[count(*) = 0]]
  /PrimaryPrefix
   /Name[@Image = 'finalize' or ends-with(@Image, '.finalize')]
]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[
public class Foo {
 public void close()  {
    finalize();       // this is bad
    foo.finalize();   // this is also bad
    this.finalize();  // this is bad but currently not flagged
    super.finalize(); // this is OK
    foo.finalize(3);  // this is arguably OK because the method is overloaded
 }
}
   ]]>
       </example>
     </rule>

    <rule name="NonStaticInitializer"
           message="Non-static initializers are confusing"
           class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       A nonstatic initializer block will be called any time a constructor
       is invoked (just prior to invoking the constructor).  While this
       is a valid language construct, it is rarely used and is confusing.
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[
//ClassBodyDeclaration/Initializer[not(@Static='true')]
]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[
public class MyClass {
 // this block gets run before any call to a constructor
 {
  System.out.println("I am about to construct myself");
 }
}
   ]]>
       </example>
     </rule>

    <rule name="DefaultLabelNotLastInSwitchStmt"
           message="The default label should be the last label in a switch statement"
           class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       The default label in a switch statement should be the last label, by convention.
       Most programmers will expect the default label (if present) to be the last one.
       </description>
         <properties>
             <property name="xpath">
                 <value>
<![CDATA[
//SwitchStatement
 [not(SwitchLabel[position() = last()][count(*) = 0])]
 [SwitchLabel[count(*) = 0]
]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[
      switch (a)
      {
         case 1:
            // do something
            break;
         default:
            // the default case should be last, by convention
            break;
         case 2:
            break;
      }
   ]]>
       </example>
     </rule>

    <rule name="NonCaseLabelInSwitchStatement"
           message="A non-case label was present in a switch statement"
           class="net.sourceforge.pmd.rules.XPathRule">
       <description>
       A non-case label (e.g. a named break/continue label) was present in a switch statement.
       This legal, but confusing. It is easy to mix up the case labels and the non-case labels.
       </description>
         <properties>
             <property name="xpath">
                 <value>
 <![CDATA[
    //SwitchStatement//BlockStatement/Statement/LabeledStatement
 ]]>
                 </value>
             </property>
         </properties>
         <priority>3</priority>
       <example>
   <![CDATA[
      switch (a)
      {
         case 1:
            // do something
            break;
         mylabel: // this is legal, but confusing!
            break;
         default:
            break;
      }
   ]]>
       </example>
     </rule>
 </ruleset>


