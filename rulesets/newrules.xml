<?xml version="1.0"?>

<ruleset name="newrules">
  <description>
These are new rules for the next release
  </description>

   <rule name="SwitchDensity"
         message="A high ratio of statements to labels in a switch statement.  Consider refactoring."
         class="net.sourceforge.pmd.rules.design.SwitchDensityRule">
     <description>
A high ratio of statements to labels in a switch statement implies that the switch
statement is doing too much work.  Consider moving the statements either into new
methods, or creating subclasses based on the switch variable.
     </description>
       <properties>
        <property name="minimum" value="10"/>
       </properties>
     <example>
<![CDATA[
  public class Foo {
    private int x;
    public void bar() {
      switch (x) {
        case 1: {
          System.out.println("I am a fish.");
          System.out.println("I am a fish.");
          System.out.println("I am a fish.");
          System.out.println("I am a fish.");
          break;
        }
        
        case 2: {
          System.out.println("I am a cow.");
          System.out.println("I am a cow.");
          System.out.println("I am a cow.");
          System.out.println("I am a cow.");
		  break;
		}
      }
    }
  }
]]>          
     </example>
   </rule>

   <rule name="NullAssignment"
         message="Assigning an Object to null is a code smell.  Consider refactoring."
         class="net.sourceforge.pmd.rules.design.NullAssignmentRule">
     <description>
Assigning a "null" to a variable (outside of its declaration) is usually in
bad form.  Some times, the assignment is an indication that the programmer doesn't
completely understand what is going on in the code.
     </description>
     <example>
<![CDATA[
public class Foo {
  public void bar() {
    Object x = null; // This is OK.
    x = new Object();
    // Big, complex piece of code here.
    x = null; // This is BAD.
    // Big, complex piece of code here.
  }
}

]]>
     </example>
   </rule>   

   <rule name="ImportFromSamePackage"
        message="No need to import a type that's in the same package"
        class="net.sourceforge.pmd.rules.ImportFromSamePackageRule">
    <description>
    No need to import a type that's in the same package.
    </description>

    <example>
<![CDATA[
package foo;
import foo.Buz; // no need for this
public class Bar{}
]]>
    </example>
    </rule>

    <rule name="UnusedModifier"
         message="Unused modifiers are, well, unused"
         class="net.sourceforge.pmd.rules.UnusedModifierRule">
     <description>
     Unused modifiers are, well, unused.
     </description>

     <example>
 <![CDATA[
public interface Foo {
public abstract void bar(); // abstract compiles, but is useless
}
 ]]>
     </example>
     </rule>

  <rule name="ForLoopShouldBeWhileLoop"
        message="This for loop could be simplified to a while loop"
        class="net.sourceforge.pmd.rules.ForLoopShouldBeWhileLoopRule">
    <description>
    Some for loops can be simplified to while loops - this makes them more concise.
    </description>

    <example>
<![CDATA[
public class Foo {
    void bar() {
        for (;true;) true; // No Init or Update part, may as well be: while (true)
    }
}
]]>
    </example>
  </rule>


  </ruleset>


