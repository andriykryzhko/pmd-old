<?xml version="1.0"?>

<ruleset name="newrules">
  <description>
These are new rules for the next release
  </description>


   <rule name="OnlyOneReturn"
        message="A method should have only one exit point, and that should be the last statement in the method"
        class="net.sourceforge.pmd.rules.design.OnlyOneReturnRule">
    <description>
    A method should have only one exit point, and that should be the last statement in the method.
    </description>

    <example>
<![CDATA[
public class OneReturnOnly1 {
 public void foo(int x) {
  if (x > 0) {
   return "hey";   // oops, multiple exit points!
  }
  return "hi";
 }
}
]]>
    </example>
    </rule>

   <rule name="JumbledIncrementer"
        message="Avoid using an outer loop incrementer in an inner loop for update expression"
        class="net.sourceforge.pmd.rules.JumbledIncrementerRule">
    <description>
    Avoid jumbled loop incrementers - it's usually a mistake, and it's confusing even if it's what's intended.
    </description>

    <example>
<![CDATA[
public class JumbledIncrementerRule1 {
 public void foo() {
  for (int i = 0; i < 10; i++) {
   for (int k = 0; k < 20; i++) {
    System.out.println("Hello");
   }
  }
 }
}}]]>
    </example>
    </rule>
		
   <rule name="AvoidDeeplyNestedIfStmts"
        message="Deeply nested if..then statements lead to madness"
        class="net.sourceforge.pmd.rules.AvoidDeeplyNestedIfStmtsRule">
    <description>
    Deeply nested if..then statements lead to madness.
    </description>

    <example>
<![CDATA[
public class Foo { 
 public void bar() { 
  int x=2; 
  int y=3; 
  int z=4; 
  if (x>y) { 
   if (y>z) { 
    if (z==x) { 
     // this is officially out of control now 
    } 
   } 
  }
 }
} 
]]>
    </example>
    </rule>		

  </ruleset>


