<?xml version="1.0"?>

<ruleset name="Basic Ecmascript rules"
	xmlns="http://pmd.sf.net/ruleset/1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
	xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

	<description>Rules concerning basic ECMAScript guidelines.</description>

    <rule name="AssignmentInOperand"
      language="ecmascript"
      since="5.0"
      message="Avoid assignments in operands"
      class="net.sourceforge.pmd.lang.rule.XPathRule"
          externalInfoUrl="http://pmd.sourceforge.net/rules/ecmascript/controversial.html#AssignmentInOperand">
<description>
Avoid assignments in operands; this can make code more complicated and harder to read.  This is sometime
indicative of the bug where the assignment operator '=' was used instead of the equality operator '=='.
  </description>
    <priority>2</priority>
    <properties>
       <property name="xpath">
          <value>
 <![CDATA[
	//IfStatement[$allowIf = "false"]/child::node()[1]/descendant-or-self::node()[self::Assignment or self::UnaryExpression[$allowIncrementDecrement = "false" and (@Image = "--" or @Image = "++")]]
|
	//WhileLoop[$allowWhile = "false"]/child::node()[1]/descendant-or-self::node()[self::Assignment or self::UnaryExpression[$allowIncrementDecrement = "false" and (@Image = "--" or @Image = "++")]]
|
	//DoLoop[$allowWhile = "false"]/child::node()[2]/descendant-or-self::node()[self::Assignment or self::UnaryExpression[$allowIncrementDecrement = "false" and (@Image = "--" or @Image = "++")]]
|
	//ForLoop[$allowFor = "false"]/child::node()[2]/descendant-or-self::node()[self::Assignment or self::UnaryExpression[$allowIncrementDecrement = "false" and (@Image = "--" or @Image = "++")]]
]]>
          </value>
       </property>
       <property name="allowIf" type="Boolean" value="false" description="Allow assignment within the conditional expression of an if statement" />
       <property name="allowFor" type="Boolean" value="false" description="Allow assignment within the conditional expression of a for statement" />
       <property name="allowWhile" type="Boolean" value="false" description="Allow assignment within the conditional expression of a while statement" />
       <property name="allowIncrementDecrement" type="Boolean" value="false" description="Allow increment or decrement operators within the conditional expression of an if, for, or while statement" />
    </properties>
  <example>
  <![CDATA[
var x = 2;
// Bad
if ((x = getX()) == 3) {
   alert('3!');
}

function getX() {
  return 3;
}
  ]]>
  </example>
</rule>

    <rule name="UnreachableCode"
    		 language="ecmascript"
    		  since="5.0"
       message="A ''return'', ''break'', ''continue'', or ''throw'' statement should be the last in a block."
          class="net.sourceforge.pmd.lang.rule.XPathRule"
          externalInfoUrl="http://pmd.sourceforge.net/rules/ecmascript/basic.html#UnreachableCode">
      <description>
A 'return', 'break', 'continue', or 'throw' statement should be the last in a block. Statements after these
will never execute.  This is a bug, or extremely poor style.
      </description>
      <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
 <![CDATA[
	//ReturnStatement[following-sibling::node()]
|
	//ContinueStatement[following-sibling::node()]
|
	//BreakStatement[following-sibling::node()]
|
	//ThrowStatement[following-sibling::node()]
]]>
                </value>
            </property>
        </properties>
      <example>
  <![CDATA[
// Ok
function foo() {
   return 1;
}
// Bad
function bar() {
   var x = 1;
   return x;
   x = 2;
}
]]>
      </example>
    </rule>

    <rule name="InnaccurateNumericLiteral"
    		 language="ecmascript"
    		  since="5.0"
       message="The numeric literal ''{0}'' will have at different value at runtime."
          class="net.sourceforge.pmd.lang.rule.XPathRule"
          externalInfoUrl="http://pmd.sourceforge.net/rules/ecmascript/basic.html#InnaccurateNumericLiteral">
      <description>
The numeric literal will have at different value at runtime, which can happen if you provide too much
precision in a floating point number.  This may result in numeric calculations being in error.
      </description>
      <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
 <![CDATA[
//NumberLiteral[
	@Image != @Number
	and translate(@Image, "e", "E") != @Number
	and concat(@Image, ".0") != @Number
	and @Image != substring-before(translate(@Number, ".", ""), "E")]
]]>
                </value>
            </property>
        </properties>
      <example>
  <![CDATA[
var a = 9; // Ok
var b = 999999999999999; // Ok
var c = 999999999999999999999; // Not good
var w = 1.12e-4; // Ok
var x = 1.12; // Ok
var y = 1.1234567890123; // Ok
var z = 1.12345678901234567; // Not good
]]>
      </example>
    </rule>

    <rule name="ConsistentReturn"
    		  since="5.0"
       message="A function should not mix 'return' statements with and without a result."
          class="net.sourceforge.pmd.lang.ecmascript.rule.basic.ConsistentReturnRule"
          externalInfoUrl="http://pmd.sourceforge.net/rules/ecmascript/basic.html#ConsistentReturn">
      <description>
ECMAScript does provide for return types on functions, and therefore there is no solid rule as to their usage.
However, when a function does use returns they should all have a value, or all with no value.  Mixed return
usage is likely a bug, or at best poor style.
      </description>
      <priority>2</priority>
      <example>
  <![CDATA[
// Ok
function foo() {
   if (condition1) {
      return true;
   }
   return false;
}

// Bad
function bar() {
   if (condition1) {
      return;
   }
   return false;
}
]]>
      </example>
    </rule>

</ruleset>
