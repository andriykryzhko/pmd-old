<?xml version="1.0"?>

<ruleset name="XPath in XSL Rules"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>
This ruleset regroups a collection of good practices regarding XPath querying and functions inside an XSL.
  </description>

	<rule name="UseConcatOnce"
              language="xsl"
    	      since="5.0"
              message="The xpath concat() function accepts as many arguments as required, you may be able to factorize this expression"
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="http://pmd.sourceforge.net/rules/xml/basic.html#UseConcatOnce">
     <description>
The XPath concat() functions accepts as many arguments as required so you can have "concat($a,'b',$c)" rather than "concat($a,concat('b',$c)".
     </description>
     <priority>3</priority>
     <properties>
         <property name="xpath">
             <value>
 <![CDATA[
//node()[contains(substring-after(@select,'concat'),'concat')]
]]>
<!-- the use of node() allow to target any node with an select attribute
     but also workaround the ambiguity of having the xsl namespace in the
     node name.-->
             </value>
         </property>
     </properties>
     <example>
 <![CDATA[
 <xsl:variable name="var" select="concat("Welcome",concat("to you ",$name))"/>
 <xsl:variable name="var" select="concat("Welcome","to you ",$name))">
 ]]>
     </example>
     </rule>
</ruleset>
