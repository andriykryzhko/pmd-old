<?xml version="1.0"?>

<ruleset name="Optimization Rules" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../etc/ruleset_xml_schema.xml">
  <description>
These rules deal with different optimizations that generally apply to performance best practices.
  </description>

    <rule name="LocalVariableCouldBeFinal"
          message="Local variable could be declared final"
          class="net.sourceforge.pmd.rules.optimization.LocalVariableCouldBeFinal">
      <description>
      A local variable assigned only once can be declared final.
      </description>
        <priority>3</priority>

      <example>
  <![CDATA[
  public void foo () {
   String a = "a"; //if a will not be assigned again it is better to do this:
   final String b = "b";
   ...   
  }
  ]]>
      </example>
      </rule>

    <rule name="MethodArgumentCouldBeFinal"
          message="Parameter ''{0}'' is not assigned and could be declared final"
          symboltable="true"
          class="net.sourceforge.pmd.rules.optimization.MethodArgumentCouldBeFinal">
      <description>
      A method argument that is never assigned can be declared final.
      </description>
        <priority>3</priority>
      <example>
  <![CDATA[
  public void foo (String param) {
      // do stuff with param never assigning it
      // better: public void foo (final String param) {
  }
  ]]>
      </example>
      </rule>


  <rule name="AvoidInstantiatingObjectsInLoops"
        message="Avoid instantiating new objects inside loops"
        class="net.sourceforge.pmd.rules.optimization.AvoidInstantiatingObjectsInLoops">
    <description>
Detects when a new object is created inside a loop
    </description>
      <priority>3</priority>
    <example>
<![CDATA[
public class Something {
  public static void main( String as[] ) {  
    for (int i = 0; i < 10; i++) {
      Foo f = new Foo(); //Avoid this whenever you can it's really expensive
    }
  }
}
]]>
    </example>
  </rule>
  
    <!-- 
    other optimization shuold be like avoiding 
    "" + int
    or "" + (int) i
    and String.valueOf(int)
    
    and using Integer.toString(int)

    IntegerToStringShuoldBeUsed
    LongToStringShuoldBeUsed    
    BooleanToStringShuoldBeUsed    
    -->

</ruleset>



                                             