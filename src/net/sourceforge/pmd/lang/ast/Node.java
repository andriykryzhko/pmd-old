/* Generated By:JJTree: Do not edit this line. Node.java */

package net.sourceforge.pmd.lang.ast;

import java.util.List;

import net.sourceforge.pmd.dfa.DataFlowNode;
import net.sourceforge.pmd.lang.java.symboltable.Scope;

import org.jaxen.JaxenException;
import org.w3c.dom.Document;

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

public interface Node {

    /**
     * This method is called after the node has been made the current
     * node.  It indicates that child nodes can now be added to it.
     */
    public void jjtOpen();

    /**
     * This method is called after all the child nodes have been
     * added.
     */
    public void jjtClose();

    /**
     * This pair of methods are used to inform the node of its
     * parent.
     */
    public void jjtSetParent(Node parent);

    public Node jjtGetParent();

    /**
     * This method tells the node to add its argument to the node's
     * list of children.
     */
    public void jjtAddChild(Node child, int index);

    /**
     * This method returns a child node.  The children are numbered
     * from zero, left to right.
     *
     * @param index the child index. Must be nonnegative and less than
     *          {@link #jjtGetNumChildren}.
     */
    public Node jjtGetChild(int index);

    /**
     * Return the number of children the node has.
     */
    public int jjtGetNumChildren();

    public int jjtGetId();

    String getImage();

    void setImage(String image);

    boolean hasImageEqualTo(String image);

    int getBeginLine();

    int getBeginColumn();

    int getEndLine();

    int getEndColumn();

    DataFlowNode getDataFlowNode();

    void setDataFlowNode(DataFlowNode dataFlowNode);

    boolean isFindBoundary();

    Node getNthParent(int n);

    <T> T getFirstParentOfType(Class<T> parentType);

    <T> List<T> getParentsOfType(Class<T> parentType);

    <T> List<T> findChildrenOfType(Class<T> targetType);

    <T> void findChildrenOfType(Class<T> targetType, List<T> results);

    <T> void findChildrenOfType(Class<T> targetType, List<T> results, boolean crossFindBoundaries);

    /**
     * Traverses down the tree to find the first child instance of type childType
     *
     * @param childType class which you want to find.
     * @return Node of type childType.  Returns <code>null</code> if none found.
     */
    <T> T getFirstChildOfType(Class<T> childType);

    /**
     * Finds if this node contains a child of the given type.
     * This is an utility method that uses {@link #findChildrenOfType(Class)}
     *
     * @param type the node type to search
     * @return <code>true</code> if there is at lease on child of the given type and <code>false</code> in any other case
     */
    <T> boolean containsChildOfType(Class<T> type);

    List findChildNodesWithXPath(String xpathString) throws JaxenException;

    // TODO Does this need to be here?
    Document getAsXml();
}
